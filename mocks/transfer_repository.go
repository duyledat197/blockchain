// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "openmyth/blockchain/internal/contract/entities"

	mock "github.com/stretchr/testify/mock"
)

// TransferRepository is an autogenerated mock type for the TransferRepository type
type TransferRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TransferRepository) Create(_a0 context.Context, _a1 *entities.Transfer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Transfer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByFrom provides a mock function with given fields: ctx, from
func (_m *TransferRepository) FindByFrom(ctx context.Context, from string) ([]*entities.Transfer, error) {
	ret := _m.Called(ctx, from)

	if len(ret) == 0 {
		panic("no return value specified for FindByFrom")
	}

	var r0 []*entities.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Transfer, error)); ok {
		return rf(ctx, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Transfer); ok {
		r0 = rf(ctx, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTo provides a mock function with given fields: ctx, to
func (_m *TransferRepository) FindByTo(ctx context.Context, to string) ([]*entities.Transfer, error) {
	ret := _m.Called(ctx, to)

	if len(ret) == 0 {
		panic("no return value specified for FindByTo")
	}

	var r0 []*entities.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Transfer, error)); ok {
		return rf(ctx, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Transfer); ok {
		r0 = rf(ctx, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: _a0
func (_m *TransferRepository) GetList(_a0 context.Context) ([]*entities.Transfer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []*entities.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.Transfer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Transfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransferRepository creates a new instance of TransferRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransferRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransferRepository {
	mock := &TransferRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
