// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	user "openmyth/blockchain/idl/pb/user"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *user.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.CreateUserRequest, ...grpc.CallOption) (*user.CreateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.CreateUserRequest, ...grpc.CallOption) *user.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetList(ctx context.Context, in *user.GetListUserRequest, opts ...grpc.CallOption) (*user.GetListUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 *user.GetListUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetListUserRequest, ...grpc.CallOption) (*user.GetListUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetListUserRequest, ...grpc.CallOption) *user.GetListUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.GetListUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.GetListUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserByID(ctx context.Context, in *user.GetUserByIDRequest, opts ...grpc.CallOption) (*user.GetUserByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *user.GetUserByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetUserByIDRequest, ...grpc.CallOption) (*user.GetUserByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetUserByIDRequest, ...grpc.CallOption) *user.GetUserByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.GetUserByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.GetUserByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPrivateKeyByID provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserPrivateKeyByID(ctx context.Context, in *user.GetUserPrivateKeyByIDRequest, opts ...grpc.CallOption) (*user.GetUserPrivateKeyByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPrivateKeyByID")
	}

	var r0 *user.GetUserPrivateKeyByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetUserPrivateKeyByIDRequest, ...grpc.CallOption) (*user.GetUserPrivateKeyByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.GetUserPrivateKeyByIDRequest, ...grpc.CallOption) *user.GetUserPrivateKeyByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.GetUserPrivateKeyByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.GetUserPrivateKeyByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateUser(ctx context.Context, in *user.UpdateUserRequest, opts ...grpc.CallOption) (*user.UpdateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *user.UpdateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) (*user.UpdateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) *user.UpdateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UpdateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UpdateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceClient creates a new instance of UserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceClient {
	mock := &UserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
