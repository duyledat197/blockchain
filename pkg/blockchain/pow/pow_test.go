package pow

import (
	"slices"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"openmyth/blockchain/pkg/blockchain/block"
)

func TestProofOfWork_Calculate(t *testing.T) {
	var testCases = []struct {
		block         *block.Block
		expectedNonce int64
		expectedHash  []byte
	}{
		{
			block: &block.Block{
				Index:         1,
				Timestamp:     1715858482,
				PrevBlockHash: []byte(""),
				Data:          []byte("data-1"),
			},
			expectedNonce: 17,
			expectedHash:  []byte{0x7, 0xe3, 0x72, 0x6, 0x77, 0x58, 0x9, 0xf2, 0x2b, 0xac, 0xa5, 0x82, 0x7a, 0x6e, 0xf1, 0xa5, 0x2, 0x5f, 0xdb, 0x67, 0xa6, 0xf1, 0x3d, 0x98, 0xa5, 0xef, 0xba, 0x11, 0xae, 0x1b, 0x88, 0xd4},
		},

		{
			block: &block.Block{
				Index:         2,
				Timestamp:     1715858482,
				PrevBlockHash: []byte{0x7, 0xe3, 0x72, 0x6, 0x77, 0x58, 0x9, 0xf2, 0x2b, 0xac, 0xa5, 0x82, 0x7a, 0x6e, 0xf1, 0xa5, 0x2, 0x5f, 0xdb, 0x67, 0xa6, 0xf1, 0x3d, 0x98, 0xa5, 0xef, 0xba, 0x11, 0xae, 0x1b, 0x88, 0xd4},
				Data:          []byte("data-2"),
			},
			expectedNonce: 24,
			expectedHash:  []byte{0x5, 0xab, 0xbf, 0xb6, 0xd4, 0x4e, 0x79, 0x3c, 0x28, 0xf2, 0xf9, 0x58, 0xeb, 0x3d, 0x19, 0x2f, 0x6a, 0x52, 0xde, 0xe3, 0x89, 0x2d, 0xf, 0x71, 0x7a, 0x4f, 0x99, 0x63, 0xe3, 0x1a, 0xc7, 0xec},
		},

		{
			block: &block.Block{
				Index:         3,
				Timestamp:     1715858482,
				PrevBlockHash: []byte{0x5, 0xab, 0xbf, 0xb6, 0xd4, 0x4e, 0x79, 0x3c, 0x28, 0xf2, 0xf9, 0x58, 0xeb, 0x3d, 0x19, 0x2f, 0x6a, 0x52, 0xde, 0xe3, 0x89, 0x2d, 0xf, 0x71, 0x7a, 0x4f, 0x99, 0x63, 0xe3, 0x1a, 0xc7, 0xec},
				Data:          []byte("data-3"),
			},
			expectedNonce: 99,
			expectedHash:  []byte{0x0, 0x4c, 0x9, 0xf0, 0x22, 0xfc, 0x10, 0xe4, 0xb3, 0x5, 0xc1, 0x64, 0x7f, 0x4c, 0x3c, 0x22, 0x64, 0xa9, 0xa9, 0x6, 0xda, 0x75, 0x3e, 0x56, 0xd2, 0xa9, 0xec, 0x15, 0x85, 0x0, 0x25, 0x23},
		},
	}

	for _, testCase := range testCases {
		pow := NewProofOfWork(testCase.block)
		nonce, hash := pow.Calculate()
		assert.Equal(t, testCase.expectedNonce, nonce)
		assert.Equal(t, testCase.expectedHash, hash)
	}
}

func TestProofOfWork_prepareHashData(t *testing.T) {
	var testCases = []struct {
		nonce          int64
		expectedHashed []byte
	}{
		{
			nonce:          70,
			expectedHashed: []byte{0xb0, 0x19, 0x8f, 0xc0, 0x51, 0x54, 0x88, 0xb4, 0x71, 0x77, 0xf4, 0x27, 0xac, 0xae, 0x4d, 0x1d, 0x10, 0x24, 0x9f, 0xd2, 0x70, 0x73, 0xf, 0x8c, 0xe2, 0xff, 0x29, 0x8c, 0x42, 0x78, 0x66, 0x1b},
		},
		{
			nonce:          1,
			expectedHashed: []byte{0x4c, 0xf, 0x6c, 0x1c, 0xe2, 0x97, 0x45, 0x80, 0xf0, 0xa6, 0xbb, 0x3b, 0x14, 0x1e, 0xa9, 0xe0, 0x47, 0xd3, 0xf9, 0x45, 0x68, 0xdc, 0x6c, 0xd6, 0x89, 0x72, 0x59, 0xc2, 0x3d, 0x40, 0x5b, 0xad},
		},
		{
			nonce:          15,
			expectedHashed: []byte{0x68, 0xab, 0x20, 0x67, 0x5c, 0x79, 0x90, 0x6b, 0xf0, 0xa3, 0x8e, 0xa6, 0x61, 0x8b, 0xd8, 0x43, 0xdc, 0x42, 0xbc, 0x2e, 0x93, 0x36, 0xd, 0x9e, 0xb2, 0x58, 0x32, 0x8a, 0x75, 0xc4, 0xbb, 0xe4},
		},
	}
	block := &block.Block{
		Index:         1,
		Timestamp:     1715858482,
		PrevBlockHash: []byte("��Q��@�G���-!�vO��M;QE���ĲB"),
		Data:          []byte("123213"),
	}
	pow := NewProofOfWork(block)
	for _, testCase := range testCases {
		require.Equal(t, testCase.expectedHashed, pow.prepareHashData(testCase.nonce))
	}
}

func TestProofOfWork_isNonceValid(t *testing.T) {
	block := &block.Block{
		Index:         1,
		Timestamp:     1715858482,
		PrevBlockHash: []byte("��Q��@�G���-!�vO��M;QE���ĲB"),
		Data:          []byte("123213"),
	}
	pow := NewProofOfWork(block)

	expectedNonceList := []int{3, 4, 7, 11, 34, 61}
	for i := range 100 {
		assert.True(t, pow.isNonceValid(int64(i)) == slices.Contains(expectedNonceList, i))
	}

}
