// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blockchain/blockchain.proto

package blockchain

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RetrieveLatestBlockResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveLatestBlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveLatestBlockResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveLatestBlockResponseMultiError, or nil if none found.
func (m *RetrieveLatestBlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveLatestBlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RetrieveLatestBlockResponseMultiError(errors)
	}

	return nil
}

// RetrieveLatestBlockResponseMultiError is an error wrapping multiple
// validation errors returned by RetrieveLatestBlockResponse.ValidateAll() if
// the designated constraints aren't met.
type RetrieveLatestBlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveLatestBlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveLatestBlockResponseMultiError) AllErrors() []error { return m }

// RetrieveLatestBlockResponseValidationError is the validation error returned
// by RetrieveLatestBlockResponse.Validate if the designated constraints
// aren't met.
type RetrieveLatestBlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLatestBlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLatestBlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLatestBlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLatestBlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLatestBlockResponseValidationError) ErrorName() string {
	return "RetrieveLatestBlockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLatestBlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLatestBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLatestBlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLatestBlockResponseValidationError{}

// Validate checks the field values on RetrieveBalanceOfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveBalanceOfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveBalanceOfRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveBalanceOfRequestMultiError, or nil if none found.
func (m *RetrieveBalanceOfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveBalanceOfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return RetrieveBalanceOfRequestMultiError(errors)
	}

	return nil
}

// RetrieveBalanceOfRequestMultiError is an error wrapping multiple validation
// errors returned by RetrieveBalanceOfRequest.ValidateAll() if the designated
// constraints aren't met.
type RetrieveBalanceOfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveBalanceOfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveBalanceOfRequestMultiError) AllErrors() []error { return m }

// RetrieveBalanceOfRequestValidationError is the validation error returned by
// RetrieveBalanceOfRequest.Validate if the designated constraints aren't met.
type RetrieveBalanceOfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveBalanceOfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveBalanceOfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveBalanceOfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveBalanceOfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveBalanceOfRequestValidationError) ErrorName() string {
	return "RetrieveBalanceOfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveBalanceOfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveBalanceOfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveBalanceOfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveBalanceOfRequestValidationError{}

// Validate checks the field values on RetrieveBalanceOfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveBalanceOfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveBalanceOfResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveBalanceOfResponseMultiError, or nil if none found.
func (m *RetrieveBalanceOfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveBalanceOfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	if len(errors) > 0 {
		return RetrieveBalanceOfResponseMultiError(errors)
	}

	return nil
}

// RetrieveBalanceOfResponseMultiError is an error wrapping multiple validation
// errors returned by RetrieveBalanceOfResponse.ValidateAll() if the
// designated constraints aren't met.
type RetrieveBalanceOfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveBalanceOfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveBalanceOfResponseMultiError) AllErrors() []error { return m }

// RetrieveBalanceOfResponseValidationError is the validation error returned by
// RetrieveBalanceOfResponse.Validate if the designated constraints aren't met.
type RetrieveBalanceOfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveBalanceOfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveBalanceOfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveBalanceOfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveBalanceOfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveBalanceOfResponseValidationError) ErrorName() string {
	return "RetrieveBalanceOfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveBalanceOfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveBalanceOfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveBalanceOfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveBalanceOfResponseValidationError{}
