// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: blockchain/blockchain.proto

package blockchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlockchainService_RetrieveLatestBlock_FullMethodName = "/blockchain.BlockchainService/RetrieveLatestBlock"
	BlockchainService_RetrieveBalanceOf_FullMethodName   = "/blockchain.BlockchainService/RetrieveBalanceOf"
)

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	RetrieveLatestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetrieveLatestBlockResponse, error)
	RetrieveBalanceOf(ctx context.Context, in *RetrieveBalanceOfRequest, opts ...grpc.CallOption) (*RetrieveBalanceOfResponse, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) RetrieveLatestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetrieveLatestBlockResponse, error) {
	out := new(RetrieveLatestBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_RetrieveLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) RetrieveBalanceOf(ctx context.Context, in *RetrieveBalanceOfRequest, opts ...grpc.CallOption) (*RetrieveBalanceOfResponse, error) {
	out := new(RetrieveBalanceOfResponse)
	err := c.cc.Invoke(ctx, BlockchainService_RetrieveBalanceOf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility
type BlockchainServiceServer interface {
	RetrieveLatestBlock(context.Context, *emptypb.Empty) (*RetrieveLatestBlockResponse, error)
	RetrieveBalanceOf(context.Context, *RetrieveBalanceOfRequest) (*RetrieveBalanceOfResponse, error)
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainServiceServer struct {
}

func (UnimplementedBlockchainServiceServer) RetrieveLatestBlock(context.Context, *emptypb.Empty) (*RetrieveLatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLatestBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) RetrieveBalanceOf(context.Context, *RetrieveBalanceOfRequest) (*RetrieveBalanceOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBalanceOf not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_RetrieveLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).RetrieveLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_RetrieveLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).RetrieveLatestBlock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_RetrieveBalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBalanceOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).RetrieveBalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_RetrieveBalanceOf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).RetrieveBalanceOf(ctx, req.(*RetrieveBalanceOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveLatestBlock",
			Handler:    _BlockchainService_RetrieveLatestBlock_Handler,
		},
		{
			MethodName: "RetrieveBalanceOf",
			Handler:    _BlockchainService_RetrieveBalanceOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain/blockchain.proto",
}
